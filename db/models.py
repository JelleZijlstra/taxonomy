# http://stackoverflow.com/questions/372885/how-do-i-connect-to-a-mysql-database-in-python
# generated by pwiz.py
from peewee import *
import json

import helpers
import settings

database = MySQLDatabase(settings.DATABASE, user=settings.USER, passwd=settings.PASSWD, charset='utf8')

class BaseModel(Model):
    class Meta:
        database = database

class Taxon(BaseModel):
    comments = TextField(null=True)
    data = TextField(null=True)
    rank = IntegerField()
    valid_name = CharField()
    parent = ForeignKeyField('self', related_name='children', null=True, db_column='parent_id')
    is_page_root = BooleanField(default=False)
    age = IntegerField()
    base_name_id = IntegerField(null=True)

    class Meta:
        db_table = 'taxon'

    def group(self):
        return helpers.group_of_rank(self.rank)

class Name(BaseModel):
    authority = CharField(null=True)
    root_name = CharField()
    data = TextField(null=True)
    group = IntegerField()
    nomenclature_comments = TextField(null=True)
    original_citation = CharField(null=True)
    original_name = CharField(null=True)
    other_comments = TextField(null=True)
    page_described = CharField(null=True)
    status = IntegerField()
    taxon = ForeignKeyField(Taxon, related_name='names', db_column='taxon_id')
    taxonomy_comments = TextField(null=True)
    type = ForeignKeyField('self', null=True, db_column='type_id')
    year = CharField(null=True)

    class Meta:
        db_table = 'name'

    def add_additional_data(self, new_data):
        '''Add data to the "additional" field within the "data" field'''
        data = json.loads(self.data)
        if 'additional' not in data:
            data['additional'] = []
        data['additional'].append(new_data)
        self.data = json.dumps(data)
        self.save()

# Simulate peewee property
def _getter (self):
    try:
        return Name.get(Name.id == self.base_name_id)
    except Name.DoesNotExist:
        return None
def _setter(self, value):
    self.base_name_id = value.id
    Taxon.update(base_name_id=value.id).where(Taxon.id == self.id).execute()
    self.save()
Taxon.base_name = property(_getter, _setter)
